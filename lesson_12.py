# lesson_12
# –†–ê–ó–ë–û–† –î–û–ú–ê–®–ù–ï–ì–û –ó–ê–î–ê–ù–ò–Ø ‚Ññ9 –∏ ‚Ññ10

"""
# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üìÉ

–°–µ–≥–æ–¥–Ω—è –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∏–≥—Ä–æ–π –≤ –≥–æ—Ä–æ–¥–∞. –ù–∞—à–∏–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º –±—É–¥–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä, –≤ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤ –†–§! üß†
**–î–µ–ª–∞–µ–º MVP –∏–≥—Ä—ã!**

6. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–≥—Ä—ã
 (–ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–æ–º—É –≥–æ—Ä–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –æ–∑–≤—É—á–∏–ª –∫–æ–º–ø—å—é—Ç–µ—Ä?)

7. –ü—É—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä —Ç–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥. –ü–æ–∏—â–µ—Ç –≥–æ—Ä–æ–¥,
–∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω—á–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É —Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–≤–∞–ª–∏ –≤—ã.

8. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –µ—Å—Ç—å - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ü–∏–∫–ª.
9. –í –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã, –æ–±—ä—è–≤–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
# –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ üëå

- –£ –≤–∞—Å –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∏—Ç—Å—è **—Ä–∞–±–æ—á–∞—è** –∏–≥—Ä–∞ –≤ –≥–æ—Ä–æ–¥–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.
- –ü—Ä–æ–±–µ–≥–∏—Ç–µ—Å—å –ø–æ –º–æ–µ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É. –í–µ—Ä–æ—è—Ç–Ω–æ, –≤ –Ω—ë–º –µ—Å—Ç—å –æ—à–∏–±–∫–∞. –ù–æ –µ—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–±–æ—á—É—é –∏–≥—Ä—É, —Ç–æ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –µ—ë üëº
- –ù–µ–π–º–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (—Ö–æ—Ä–æ—à–∏–µ —á–∏—Ç–∞–µ–º—ã–µ –∏–º–µ–Ω–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ —Å–º—ã—Å–ª—É)
- PEP-8
"""
import json
from typing import Any

from cities import cities
from pprint import pprint


# sities_set = set()
#
# for city in cities:
#     sities_set.add(city['name'])
#
# # –ó–∞–ø–∏—Å—å —Å–µ—Ç–∞ –≤ JSON —Ñ–∞–π–ª
# with open('cities_set.json', 'w', encoding='utf-8') as file:
#     json.dump(list(sities_set), file, ensure_ascii=False, indent=4)

# BAD_FIRST_LETTERS = f'–í—ã –Ω–∞–∑–≤–∞–ª–∏ –≥–æ—Ä–æ–¥ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç'
# COMPUTER_WIN = f'–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª, –Ω–∞–∑–≤–∞–≤ –≥–æ—Ä–æ–¥'
#
# # –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å–µ—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
# def read_from_json(file_name, encoding='utf-8'):
#     with open(file_name, 'r', encoding=encoding) as file:
#         return json.load(file)
#
#
# # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ JSON —Ñ–∞–π–ª
# def write_to_json(file_name, data, encoding='utf-8'):
#     with open(file_name, 'w', encoding=encoding) as file:
#         json.dump(data, file, ensure_ascii=False, indent=4)
#
#
# # –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# def get_log_writer(data, file_name, encoding='utf-8'):
#     print(data)
#     write_to_json(file_name, data, encoding=encoding)
#
#
# # –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–±–µ–¥. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–∞ –ø–æ–±–µ–¥, —á–∏—Ç–∞–µ—Ç –µ–≥–æ, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–±–µ–¥—É
# # –õ–æ–≥ –ø–æ–±–µ–¥ - —Å–ø–∏—Å–æ–∫. –û–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª–∏–Ω–æ–π
#
# def get_log_writer_win(data, file_name='win_log.md', encoding='utf-8'):
#     win_log = read_from_json(file_name, encoding=encoding)
#     if win_log and len(win_log) >= 5:
#         win_log[0] = data
#     else:
#         win_log.append(data)
#     write_to_json(file_name, win_log, encoding=encoding)

#
# cities_set = set(read_from_json('cities_set.json'))
#
# computer_city = None
# bad_letters = ('—å', '—ã', '—ä')
# last_letter_index = -1
#
# while True:
#     user_city = input('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥: ')
#
#     if user_city == '—Å—Ç–æ–ø':
#         print('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')
#         break
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–ª–æ—Ö–æ–π –±—É–∫–≤—ã
#     if user_city[last_letter_index] in bad_letters:
#         print(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –±—É–∫–≤—É. {user_city[last_letter_index]}')
#         continue
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
#     if computer_city:
#         if user_city[0].lower() != computer_city[last_letter_index].lower():
#             print(f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –±—É–∫–≤—É {computer_city[last_letter_index]}')
#             break
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–µ—Ç–µ –≥–æ—Ä–æ–¥–æ–≤
#     if user_city in cities_set:
#         print(f'–ì–æ—Ä–æ–¥: {user_city} –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
#         # –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–µ—Ç–∞
#         cities_set.remove(user_city)
#
#     else:  # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∏–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ
#         print(f'–ì–æ—Ä–æ–¥–∞ {user_city} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')
#         # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
#         get_log_writer_win(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∏–≥—Ä–∞–ª. –ì–æ—Ä–æ–¥–∞ {user_city} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ\n'
#                            f'–ê –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª, –Ω–∞–∑–≤–∞–≤ –≥–æ—Ä–æ–¥ {computer_city}\n'
#                            f'--------------------------\n\n')
#         break
#
#     # –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
#
#     # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞
#     last_letter = user_city[last_letter_index].lower()
#     # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –≤ —Å–µ—Ç–µ
#     for city in cities_set:
#         if city[0].lower() == last_letter and city[-1].lower() not in bad_letters:
#             print(f'–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥: {city}')
#             computer_city = city
#             cities_set.remove(city)
#             break
#
#     else:
#         print('–í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ —Å–º–æ–≥ –Ω–∞–∑–≤–∞—Ç—å –≥–æ—Ä–æ–¥')
#         # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
#         get_log_writer_win(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–±–µ–¥–∏–ª. –ì–æ—Ä–æ–¥ {user_city} –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ —Å–º–æ–≥ –Ω–∞–∑–≤–∞—Ç—å –≥–æ—Ä–æ–¥\n')
#         # last_letter_index -= 1
#         pass
#
#
# def main():
#     city_set = set(read_from_json('cities_set.json'))
#     user_city = None
#
#     # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
# # –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
#   pass
#
#
#
# main()

# –§–£–ù–ö–¶–ò–ò
def get_som():
    str = 'Hello'
    return str


def say_it(string):
    if string == 'Hello':
        return '–ü—Ä–∏–≤–µ—Ç'
    elif string == 'Bye':
        return '–ü–æ–∫–∞'
    else:
        return '–ù–µ –ø–æ–Ω–∏–º–∞—é'


result = say_it('asdf')
print(result)


# –ü—Ä–∞–∫—Ç–∏–∫–∞ - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤ HTTP
# 1xx: Informational (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ): 100 Continue, 101 Switching Protocols, 102 Processing
# 2xx: Success (—É—Å–ø–µ—à–Ω–æ): 200 OK, 201 Created, 204 No Content
# 3xx: Redirection (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ): 301 Moved Permanently, 302 Found, 304 Not Modified
# 4xx: Client Error (–æ—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞): 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
# 5xx: Server Error (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞): 500 Internal Server Error, 502 Bad Gateway, 503 Service Unavailable, 504 Gateway Timeout

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–¥, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
# –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¢–û–õ–¨–ö–û –ù–ê –ü–ï–†–í–£–Æ –¶–ò–§–†–£
# def get_status_code(code):
# –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ match case

def get_status_code(code: int) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–¥, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
    :param code: –°—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ HTTP
    :return: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞
    """
    match code:
        case int(1):
            return 'Informational (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ)'
        case int(2):
            return 'Success (—É—Å–ø–µ—à–Ω–æ)'
        case int(3):
            return 'Redirection (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)'
        case int(4):
            return 'Client Error (–æ—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞)'
        case int(5):
            return 'Server Error (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)'
        case _:
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥'


user_input = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: '))
print(get_status_code(user_input))

# –ü—Ä–∞–∫—Ç–∏–∫–∞ ‚Ññ2
"""
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É.

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á - —ç—Ç–æ –±—É–∫–≤–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —ç—Ç–æ–π –±—É–∫–≤—ã –≤ —Å—Ç—Ä–æ–∫–µ.
sequence.count(element) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ element –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ sequence

# def letter_counter(string):

# —Å–ª–æ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è
–°–¥–µ–ª–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ç–∏–ø–æ–≤
–ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–ª –º–µ–Ω—å—à–µ
"""


def letter_counter(string: str) -> dict:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–∫–≤ –≤ —Å—Ç—Ä–æ–∫–µ
    :param string: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –±—É–∫–≤
    :return: –°–ª–æ–≤–∞—Ä—å. –ö–ª—é—á - –±—É–∫–≤–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —á–∏—Å–ª–æ
    """
    res_dict = {}

    str_set = set(string)
    for letter in str_set:

        if letter != ' ':
            count = string.count(letter)
            res_dict[letter] = count

    return res_dict


string = '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ –º–∞–Ω–∏—Ç –Ω–µ–≥—Ä–ê –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ –º–∞–Ω–∏—Ç –Ω–µ–≥—Ä–ê –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ –º–∞–Ω–∏—Ç –Ω–µ–≥—Ä–ê –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ –º–∞–Ω–∏—Ç –Ω–µ–≥—Ä–ê' \
         '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ –º–∞–Ω–∏—Ç –Ω–µ–≥—Ä–ê –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ –º–∞–Ω–∏—Ç –Ω–µ–≥—Ä–ê–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ –º–∞–Ω–∏—Ç –Ω–µ–≥—Ä–ê '

some_float = 1, 0
print(type(some_float))
print(letter_counter(string))

"""
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏ –∑–Ω–∞—á–µ–Ω–∏–µ. 
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
"""


def get_key_by_value(dict_: dict, value: Any) -> dict:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
    :param dict_: –°–ª–æ–≤–∞—Ä—å
    :param value: –ó–Ω–∞—á–µ–Ω–∏–µ
    :return: –°–ª–æ–≤–∞—Ä—å
    """
    for key, val in dict_.items():
        if val == value:
            return {key: val}


# –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
full_dict = {
    'title': '–ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫',
    'year': 2008,
    'director': '–î–∂–æ–Ω –§–∞–≤—Ä–æ',
    'screenwriter': '–ú–∞—Ä–∫ –§–µ—Ä–≥—É—Å –∏ –•–æ—É–∫ –û—Å—Ç–±–∏, –ê—Ä—Ç—É—Ä –ú–∞—Ä–∫–∞–º –∏ –ú—ç—Ç—Ç –•–æ–ª–ª–æ—É—ç–π',
    'producer': '–ê–≤–∏ –ê—Ä–∞–¥ –∏ –ö–µ–≤–∏–Ω –§–∞–π–≥–∏',
    'stage': '–ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞'
}

print(get_key_by_value(full_dict, '–î–∂–æ–Ω –§–∞–≤—Ä–æ'))
