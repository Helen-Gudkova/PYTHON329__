"""
LESSON 2

- Bool
- Зарезервированные слова
- Правила именования переменных
- Математические операторы
- Практика с математическими операторами
- PEP-8
- Операторы сравнения
- Логические операторы
- Приоритет выполнения логических операторов
- Изменение типов
- Практика
- Ошибки синтаксические и логические
"""

# ------ Bool ------
# True - истина
# False - ложь

# ------ Зарезервированные слова ------

"""
False, class, finally, is, return, None, continue, for, 
lambda, try, True, def, from, nonlocal, 
whileand, del, global, not, with, as, elif, if, or, 
yield, assert, else, import, pass, break, except, in, raise.
"""

# Пробуем создать переменную с именем False
# print('Сообщение до ошибки!')
# False = 5 # Синтаксическая ошибка.

# print = 10 # Переменная print теперь ссылается на число 10. И более не является функцией.
# print(print) # TypeError: 'int' object is not callable

# ------ Правила именования переменных ------
# Имя переменной может состоять из букв, цифр и нижнего подчеркивания
# Имя переменной не может начинаться с цифры (но может её содержать)
# Имя переменной не может быть зарезервированным словом
# Имя переменной не может содержать пробелов
# Имя переменной чувствительно к регистру
# Имя переменной должно быть осмысленным

# Это РАЗНЫЕ переменные

# name = 'Иван'
# NAME = 'Иван'
# Name = 'Иван'
# nAme = 'Иван'

# ------ Математические операторы ------
# + - * / // % **

# Cложение
# summ = 5 + 5
# print(f'Сумма: {summ}')

# Вычитание
# diff = 10 - 5
# print(f'Разность: {diff}')

# Умножение
# mult = 5 * 5
# print(f'Произведение: {mult}')

# Деление
# div = 10 / 3
# print(f'Частное: {div}')

# Порядок выполнения операций
# 1. Скобки
# 2. Возведение в степень
# 3. Умножение, деление, остаток от деления
# 4. Сложение и вычитание

# Пример
# sample = 2 + 2 * 2
# print(f'Пример: {sample}')
# sample2 = (2 + 2) * 2
# print(f'Пример2: {sample2}')

# Остаток от деления
# remainder = 10 % 3
# print(f'Остаток от деления: {remainder}')

# Целочисленное деление
# int_div = 10 // 3
# print(f'Целочисленное деление: {int_div}')

# Возведение в степень
# power = 2 ** 3
# print(f'Возведение в степень: {power}')

# Задачка. Считаем количество целых часов в минутах. Инпут. Ввод данных. int() - преобразование в целое число.
# Рассчет количества часов в минутах. (Если ввели 320 минут, то получим 5 часов)

# minutes = int(input('Введите количество минут: '))  # Запросили минуты. Преобразовали в целое число.
# hours = minutes // 60  # Рассчитали количество часов. (получили целое, дробная часть отбрасывается)
# print(f'Количество часов: {hours}')  # Вывели результат.

# Альтернативное решение

# minutes = input('Введите количество минут: ')  # Запросили минуты.
# minutes = int(minutes)  # Преобразовали в целое число.
# hours = minutes // 60  # Рассчитали количество часов. (получили целое, дробная часть отбрасывается)
# print(f'Количество часов: {hours}')  # Вывели результат.

# Альтернативное решение
# print(f'Количество часов: {int(input("Введите количество минут: ")) // 60}')  # Вывели результат.

# ------ PEP-8 ------
# Соглашение о стиле кода
# https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html

# ------ Операторы сравнения ------
# > < >= <= == != is is not
# a = 5
# b = 3
# print(a > b)  # True > - больше
# print(a < b)  # False < - меньше
# print(a >= b)  # True > = - больше или равно
# print(a <= b)  # False < = - меньше или равно
# print(a == b)  # False = = - равно
# print(a != b)  # True ! = - не равно

# Нет эквивалента нестрогого сравнения в JS.
# a = 5
# b = '5'
# print(a == b)  # False

# is - оператор идентичности. Сравнивает объекты. (Оператор сравнения ссылок)
# is not - оператор не идентичности. Сравнивает объекты. (Оператор сравнения ссылок)
# Отличается от == тем, что сравнивает не значения, а ссылки на объекты.

# name = 'ИваН'
# name2 = 'Иван'
# print(name == name2)  # True
# print(name is name2)  # True
#
# print(name >= name2)  # True
# print(name <= name2)  # True
# print(name != name2)  # False
# print(name < name2)  # False

# При сравнении строк на больше или меньше используется лексикографический порядок.
# Cтроки сравниваются посимвольно. Первые символы сравниваются по таблице символов.
# Если первые символы равны, то сравниваются вторые символы и т.д.
# Если одна строка заканчивается, а другая нет, то больше та, у которой больше символов.
# Если все символы равны, а одна строка заканчивается, а другая нет, то больше та, у которой меньше символов.
# Если все символы равны, то строки равны.

# ------ Логические операторы ------
# and or not
# and - логическое И. Возвращает True, если оба операнда истинны.
# or - логическое ИЛИ. Возвращает True, если хотя бы один операнд истинный.
# not - логическое НЕ. Возвращает True, если операнд ложный.

# print(True and True)  # True
# print(True and False)  # False
# print(False and True)  # False
# print(False and False)  # False

# print(True or True)  # True
# print(True or False)  # True
# print(False or True)  # True
# print(False or False)  # False

# print(not True)  # False
# print(not False)  # True

# Примеры сравнения с логическими операторами (цифры и строки)

# print(f'Проверяем выражение "5 > 3 and 5 > 2": {5 > 3 and 5 > 2}')  # True
# print(f'Проверяем выражение "5 > 3 and 5 < 2": {5 > 3 and 5 < 2}')  # False
#
# name = 'Иван'
# age = 30
#
# print(f'=============================\n'
#       f'Проверяем выражение\n'
#       f'"name == "Иван" and age == 30": '
#       f'{name == "Иван" and age == 30}')  # True

# Примеры с not

# name = input('Введите имя: ')
# Если пользователь ввел имя Иван или ivan или Ivan или иван, то вывести False, иначе True.
# Происходит проверка всех условий, если хотя бы одно из них True, то возвращается True, иначе False.
# Затем результат инвертируется с помощью not
# print(f'Вход разрешен: {not (name == "Иван" or name == "иван" or name == "Ivan" or name == "ivan")}')

# Приоритет операторов
# 1. ()
# 2. not
# 3. and
# 4. or

# Пример с приоритетом операторов
# print(f'Проверяем выражение "5 > 3 and 5 > 2 or 5 < 2": {5 > 3 or (5 > 2 and 5 < 2)}')  # True

# =============================

# Практика. Калькулятор одобрения кредита.
"""
Кредитный калькулятор.
Введите возраст
Введите имеющиеся долги.
Введите доход.
Введите желаемую сумму кредита.
Введите срок кредита.

Далее считаем. 
1) Возраст не должен быть менее 18 и более 75. AND
2) Ежемесячный платеж не должен быть больше чем 0.5 от ЗП. AND
3) Долгов не должно быть. 
В таком случае возвращаем True.
"""

age = input('Введите возраст: ')
age = int(age)

credit = input('Ведите имеющиеся долги: ')
credit = int(credit)

profit = input('Введите доход: ')
profit = int(profit)

new_credit = int(input('Введите желаемую сумму кредита:'))
len_credit = int(input('Введите срок кредита'))

# Приоритет операторов
# 1. ()
# 2. not
# 3. and
# 4. or
# 1) Возраст не должен быть менее 18 и более 75. AND
# 2) Ежемесячный платеж не должен быть больше чем 0.5 от ЗП. AND
# 3) Долгов не должно быть.

# Вариант 1
# print(f'Кредит одобрен:{(18 < age < 75) and (new_credit/len_credit <= profit*0.5) and (credit <= 0)}')


# Вариант 2
is_age = 18 < age < 75
is_debt = credit <= 0
is_many = new_credit/len_credit <= profit*0.5

print(f'Кредит одобрен:{is_age and is_debt and is_many}')


