"""

# –†–∞–∑–±–æ—Ä HW ‚Ññ14 (–ü–∞–ª–∏–Ω–¥—Ä–æ–º)
–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–ª—é—á - –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ,
–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ - –±—É–ª–µ–≤ —Ç–∏–ø.

```python
result = [
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç `*args` —Å—Ç—Ä–æ–∫, –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω–æ—Å—Ç—å.
		  {'—Å—Ç—Ä–æ–∫–∞ 1': True},
		  {'—Å—Ç—Ä–æ–∫–∞ 2': False}
]
```
- –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
- –°–¥–µ–ª–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥, –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫.
- –ó–∞—Ç–µ–º —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º, –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.

"""
from pprint import pprint


def check_palindromes(*strings):
    result = []
    for string in strings:
        if string == string[::-1]:
            result.append({string: True})
        else:
            result.append({string: False})
    return result


# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç insert
# –ú–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
# append - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
# insert - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É
# extend - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Å–ø–∏—Å–∫–∞

def check_palindromes_test_version(*strings):
    result = []
    for string in strings:
        if string == string[::-1]:
            result.insert(3, {string: True})
        else:
            result.insert(3, {string: False})
    return result


# input_lst = input('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ').split(',')
# print(check_palindromes(*input_lst))

# =========================================================
# –†–∞–∑–±–æ—Ä HW ‚Ññ12 (–°–ª–æ–≤–∞—Ä—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
# –ù–∞–ø–∏—Å–∞—Ç—å 3 —Ñ—É–Ω–∫—Ü–∏–∏
"""1 –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, 
—Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã."""


def intersection_short_version(lst1, lst2):
    return list(set(lst1) & set(lst2))


def intersection_long_version(lst1, lst2):
    set1 = set(lst1)
    set2 = set(lst2)
    intersection_set = intersection(set1, set2)
    result = list(intersection_set)
    return result


def intersection(lst1, lst2):
    result = []
    for element in lst1:
        if element in lst2:
            result.append(element)
    return result


# –ó–∞–¥–∞—á–∞ 2 - –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–∫–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –≤ —Å–ª–æ–≤–µ
"""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è 
–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ –≤ –Ω–µ–π."""

# VOWELS = ['–∞', '–µ', '—ë', '–∏', '–æ',
#           '—É', '—ã', '—ç', '—é', '—è']

# CONSONANTS = ['–±', '–≤', '–≥', '–¥', '–∂', '–∑', '–π', '–∫', '–ª', '–º', '–Ω',
#               '–ø', '—Ä', '—Å', '—Ç', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â']


# def count_vowels_and_consonants(word):
#     vowels = 0
#     consonants = 0
#     for letter in word:
#         if letter.lower() in VOWELS:
#             vowels += 1
#         elif letter.lower() in CONSONANTS:
#             consonants += 1
#     return vowels, consonants
#

# word_input = input('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: ')
# print(count_vowels_and_consonants(word_input))

# –ó–∞–¥–∞—á–∞ 3
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.

# def find_longest_string(lst):
#     longest_string = ''
#     for string in lst:
#         if len(string) > len(longest_string):
#             longest_string = string
#     return longest_string


# test_lst = ['1', '22', '333', '4444', '55555', '66']

# print(find_longest_string(test_lst))

# =========================================================
# –†–∞–∑–±–æ—Ä HW ‚Ññ15 (–†–∞–∑–±–∏–≤–∫–∞ MD —Ñ–∞–π–ª–∞)

MD_STRING = """
---
tags:
  - python329
journal: "[[PYTHON 329. –ñ—É—Ä–Ω–∞–ª]]"
type:
  - home work
block: python
hw_theme:
  - Markdown
  - functions
hw_num: 1
topic: –ü–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è, –∑–∞–ø–∏—Å–∏ –∏ –¥–æ–±—ã—á–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Markdown —Ñ–∞–π–ª–µ
st_group: python 329
date: 2023-09-10
module: 8
lesson_no: 32
lesson_file: "[[Python 329. Python. Lesson 32]]"
---
# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üìÉ

–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —á—Ç–æ –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ, –∏ –ø–æ–∫–∞ –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É, –ø–æ–¥—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ.

–í—ã –≤–∑—è–ª–∏, –∫–∞–∫ –∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–∫–∞–∑. –ù–∞–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ Markdown.

–ó–∞–∫–∞–∑—á–∏–∫ –±—ã–ª –Ω–µ –æ—Å–æ–±–æ –æ–±—â–∏—Ç–µ–ª–µ–Ω, –Ω–æ –æ–Ω –≤—Å—ë –∂–µ –¥–∞–ª —Å–Ω–æ—Å–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ.

# –¢–ó –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ üòé

–ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Markdown —Ñ–∞–π–ª–∞–º–∏. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —á–∏—Ç–∞—Ç—å, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å Markdown —Ñ–∞–π–ª—ã.

- –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è MD —Ñ–∞–π–ª–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ (—Ç–∞–∫ –∂–µ –∫–∞–∫ TXT), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
- –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ MD —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—à–ª–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤–µ—Å—å —Ñ–∞–π–ª –Ω–∞ —Å–ø–∏—Å–æ–∫. –û—Ç–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ = –ó–∞–≥–æ–ª–æ–≤–æ–∫ MD —Ñ–∞–π–ª–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç MD —Ñ–∞–π–ª
"""

# –ù–∞–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

DELIMITER = '#'
TEMP_LST = MD_STRING.split(DELIMITER)
# print(TEMP_LST)


# def split_md_file_to_dict(file_string: str) -> dict:
#     """
#     –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ MD.
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–∏ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —Å–∞–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
#     """
#     metadata_end = file_string.index("---", 3)  # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö 3 - —ç—Ç–æ –Ω–∞—á–∞–ª–æ "---"
#     metadata = file_string[3:metadata_end].strip()  # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
#     text = file_string[metadata_end + 3:].strip()  # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
#
#     metadata_dict = yaml.safe_load(metadata)
#
#     return {"metadata": metadata_dict, "text": text}


def split_md_file_to_list(file_string: str) -> list:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ MD.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
    –§—É–Ω–∫—Ü–∏—è –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç frontmatter.
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –≤—Å—ë –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É #
    file_lst = file_string.split('#')
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
    file_lst.pop(0)
    # –ü—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ —Å–ø–∏—Å–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–∏–º–≤–æ–ª #
    for i in range(len(file_lst)):
        file_lst[i] = '#' + file_lst[i]
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    return file_lst


# –°–¥–µ–ª–∞–µ–º –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ —É–±–µ—Ä–µ–º)
# –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–µ—Ç–∞–¥–∞—Ç—É –∫–æ—Ä–æ—Ç–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å --- –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ---
# –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–µ—Ç–∞–¥–∞—Ç—ã
metadata_end = MD_STRING.index("---", 3)
# –û–±—Ä–µ–∑–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Ç–∞–¥–∞—Ç—ã
text = MD_STRING[metadata_end + 3:].strip()
# –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É #
file_lst = text.split('#')

# –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
file_lst.pop(0)
# –ü—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ —Å–ø–∏—Å–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–∏–º–≤–æ–ª #
for i in range(len(file_lst)):
    file_lst[i] = '#' + file_lst[i]
# –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫
# print(file_lst)


# –í–∞—Ä–∏–∞–Ω—Ç –ê–Ω–¥—Ä–µ—è - —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ ---

# --------------------------------------------------
# –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏)

# –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
# - –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∏–º—è
# - –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å return
# - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
# - –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ

# –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:
# - –Ω–µ–ª—å–∑—è –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥
# - –Ω–µ–ª—å–∑—è –Ω–∞–ø–∏—Å–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
# - –Ω–µ–ª—å–∑—è –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
# - –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ, return, yield

# –°–∏–Ω—Ç–∞–∫—Å–∏—Å:
# lambda arguments: expression

# –ü—Ä–∏–º–µ—Ä—ã:

def func1(x):
    return x + 1


func2 = lambda x: x + 1

print(func1(1))
print(func2(1))


# map - –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
user_int_input = ['1', '2', '3', '4', '5']

# –ü—Ä–æ—Ö–æ–¥–∏–º map –ø–æ —Å–ø–∏—Å–∫—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Ñ—É–Ω–∫—Ü–∏—é int
user_int_input = list(map(int, user_int_input))

# –î–µ–ª–∞–µ–º lambda + map
user_int_input = list(map(lambda x: int(x)+100, user_int_input))
print(user_int_input)