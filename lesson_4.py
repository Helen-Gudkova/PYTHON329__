#  Вложенные условия IF и методы строк

# Условия могут быть вложенными, т.е. одно условие может находиться внутри другого.
# Внимание на отступы. Вложенные условия должны иметь больший отступ, чем родительские.
# Блок - это группа инструкций, которые имеют одинаковый отступ.

# Методы строк
# СПРАВКА - https://pythonworld.ru/tipy-dannyx-v-python/stroki-funkcii-i-metody-strok.html

# r - raw string - сырая строка
# len() - возвращает длину строки

# split() - разбивает строку на элементы списка по разделителю
# ' '.join() - объединяет элементы списка в строку

# lower() - преобразует строку в нижний регистр
# upper() - преобразует строку в верхний регистр
# replace() - заменяет одну подстроку на другую
# strip() - удаляет пробелы в начале и в конце строки
# find() - Поиск подстроки в строке. Возвращает номер первого вхождения или -1
# index() - Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueError
# count() - Возвращает количество вхождений подстроки в строке
# isdigit() - Проверяет, состоит ли строка из цифр. Возвращает True или False
# isalpha() - Проверяет, состоит ли строка из букв. Возвращает True или False
# isalnum() - Проверяет, состоит ли строка из цифр или букв. Возвращает True или False
# capitalize() - Переводит первый символ строки в верхний регистр, а все остальные в нижний
# title() - Переводит первый символ каждого слова строки в верхний регистр, а все остальные в нижний

# Функция принимает строку, разбивает на список, делает реверс, собирает обратно строку и возвращает её
# row - сырая строка
path = 'C:\\n\\lesson_4.py'  # Символ экранирования экранирует \
path2 = r'C:\n\lesson_4.py'  # r - raw, сырая строка

lesson_num = '4'
path3 = rf'C:\n\lesson_{lesson_num}.py'  # f - format, форматирование строки r - raw, сырая строка

query = 'Python%20doc'
url = fr'https://www.google.com/search?q={query}'

# len - length, длина
# print(len(url))
#
# string = 'HellO, wOrlD!'
# print(string.lower())
# print(string.upper())

# Strip and replace в базовом варианте (strip - обрезать пробелы)
# string2 = ' Hello, Monty Python! '
# print(string2.strip())  # Есть ещё lstrip() и rstrip()
# print(string2.replace(', ', '! '))
#
# print(string2.strip().replace(', ', '! ').upper())

# Пример с именем
# hey = 'Привет, Игорь! Как твои дела, Игорь?'
# new_name = 'Станислав'
# print(hey.replace('Игорь', new_name))


# Strip - аргумент - символы, которые нужно обрезать
# Вызов цепочки методов
# string3 = 'Hello, Monty Python!'
# print(string3.strip('!'))
# print(string3.strip('!').lstrip('Hello, Monty'))
# print(string3.strip('!').lstrip('Hello, Monty').replace('Python', 'Python_329'))

# Find - поиск подстроки в строке. Index - то же самое, но вызывает ошибку, если подстрока не найдена

# string4 = 'Hello, Monty Python!'
# print(string4.find('Monty'))  # Вернет 7 - номер первого символа
#
# find_monty = string4.find('Monty')
# if find_monty != -1:
#     print(string4[find_monty:])
# else:
#     print('Not found')

# Практика.
# ==== Новояз ======
# Введите пословицу. Введите слово которое хотите заменить.
# Получить пословицу. Старое слово. Новое слово.
# Вывести пословицу с заменой слова.


proverb = """
Ум придет, да пора уйдет.
Имей ум – все остальное приложится.
За ум возьмешься – до дела доберешься.
Есть ум, есть и рубль.
Каков, ум, таков и разум.
Краса до венца, а ум до конца.
На всякую дурость ум найдется.

"""

# print(proverb.lower().replace('ум', '[код]'))

# ==== Новояз ======
# proveb = input('Введите пословицу: ').lower()
# old_word = input('Введите слово которое хотите заменить: ').lower()
# new_word = input('Введите новое слово: ').lower()
#
# print(proveb.replace(old_word, new_word.upper()))

# is_digit - проверяет, состоит ли строка из цифр
# is_alpha - проверяет, состоит ли строка из букв

user_name = 'ivanov2313'
print(user_name.isalpha())
print(user_name.isdigit())
print(user_name.isalnum())

# if - сокращенный вариант записи

is_digit = True
is_alpha = False

# Полная запись
# if is_digit == True:
    # print('Число')

# Сокращенная запись. Если проверка происходит только по одному условию.
# if is_digit:
    # print('Число')

# Полная запись
# if user_name.isalpha() == True:
    # print('Только буквы')

# Сокращенная запись
# if user_name.isalpha():
    # print('Только буквы')

# Полная запись
user_name = 'ivanov2313'
# is_len = len(user_name) > 7

# if is_len == True:
    # print('Длина больше 7')

# Сокращенная запись
# if is_len:
    # print('Длина больше 7')

# Списки. List.
# Методы списков. split() - разбивает строку на список по разделителю
# join() - собирает список в строку по разделителю

# Список - упорядоченная последовательность элементов. Изменяемый тип данных.
# Список - это контейнер, который содержит в себе другие объекты.

shop_list = ['milk', 'bread',
             'eggs', 'sugar',
             'salt', 'water',
             'potato', 'tomato',
             ]

# print(shop_list)
# Обращение к элементу списка по индексу
# print(shop_list[0])
# print(shop_list[7])

# Срез
# print(shop_list[0:3])  # Срез с 0 по 3 элемент (3 не включительно)

# Len - длина списка
# print(len(shop_list))

# Строка с продуктами, разделитель ;
shop_str = 'milk;bread;eggs;sugar;salt;water;potato;tomato'
shop_lst = shop_str.split(';')  # Разбивает строку на список по разделителю
# print(f"Результат работы split(): {shop_lst}")

# Список это изменяемый тип данных. Можно изменить элемент по индексу
shop_lst[0] = 'juice'
# print(shop_lst)

proverb2 = """
Ум придет, да пора уйдет.
Имей ум – все остальное приложится.
За ум возьмешься – до дела доберешься.
Есть ум, есть и рубль.
Каков, ум, таков и разум.
Краса до венца, а ум до конца.
На всякую дурость ум найдется.
"""
print(proverb2.split('\n'))
print(proverb2.split('.'))
print(proverb2.split('.\n',))

print(proverb2.split('.|\n'))
print(len(proverb2.split('.|\n')))

# Создаем список. Каждый элемент - 1 пословица, с replace убираем перенос строки
# Список создается из строки proverb2, которую мы разбили на список по разделителю '.'
# Не переживайте. Это мы пока не проходили. Просто показываю, что можно делать и так.
lst = [x.replace('\n', '') for x in proverb2.split('.')]
print(lst)

# Практика. Проверка строки на правильность ввода номера телефона
# +X (XXX) (XXX-XXXX)
# X-XXX-XXX-XXXX
# X-XXX-XXX-XX-XX
# 1. Номер телефона начинается на 8 или +7
# 2. Номер телефона состоит из 11 цифр
# 3. Номер телефона состоит из цифр
# Принт - Номер телефона введен правильно (не правильно)


# Напишите скрипт, проверки пароля на валидность. Пользователь вводит пароль, а скрипт проверяет его и сообщает надёжный это пароль или стоит придумать другой?
#
# Критерии проверки пароля
#
# - Должен содержать хотя бы один спецзнак
# - Должен содержать символы разных регистров (большие и маленькие)
# - Должен быть более 7 символов длиной

password = input('Введите пароль: ')

if len(password) >= 7:
    if not password.isalnum():
        if not password.islower() and not password.isupper():
            print('Пароль надежный')
        else:
            print('Пароль не надежный')
    else:
        print('Пароль не надежный')
else:
    print('Пароль не надежный')

# Более короткий вариант этого кода

if len(password) >= 7 and not password.isalnum() and not password.islower() and not password.isupper():
    print('Пароль надежный')
else:
    print('Пароль не надежный')
